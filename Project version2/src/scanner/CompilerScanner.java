// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: IdeaProjects/Project 6/src/scanner/scanner.flex

//import com.sun.java_cup.internal.runtime.Symbol;
package scanner;
import parser.Lexical;

import java.io.*;

/**
* This class is a Scanner
*/

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CompilerScanner implements Lexical {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u2000\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u2000\1\u3f00\1\u4000\4\u2000"+
    "\1\u4100\11\u2000\3\u1100\1\u4200\1\u4300\13\u2000\4\u1100\1\u4400"+
    "\63\u2000\2\u1100\1\u4500\4\u2000\1\u4600\100\u2000\1\u4700\40\u2000"+
    "\1\u4800\1\u4900\1\u2000\1\u4a00\1\u4b00\1\u4c00\1\u4d00\26\u2000"+
    "\1\u4e00\21\u2000\246\u1100\1\u4f00\20\u1100\1\u5000\1\u5100\77\u2000"+
    "\2\u1100\1\u5100\u0b05\u2000\1\u5200\1\u5300\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\16\0\4\1\1\4"+
    "\1\5\1\6\1\1\1\7\1\10\1\11\1\1\2\10"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21"+
    "\2\10\1\22\1\23\1\5\2\1\1\24\3\25\1\26"+
    "\1\25\6\7\1\27\12\7\1\30\2\7\1\10\1\31"+
    "\2\10\1\32\1\1\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\7\1\44\1\45\1\7"+
    "\1\46\1\47\1\50\1\7\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\30\1\57\1\7\1\10\1\60\1\10"+
    "\1\1\41\0\2\1\4\7\4\1\1\7\2\1\1\0"+
    "\7\1\1\7\4\1\1\7\5\1\27\7\1\1\37\7"+
    "\1\1\u01ca\7\4\1\14\7\16\1\5\7\7\1\1\7"+
    "\1\1\1\7\21\1\160\0\5\7\1\1\2\7\2\1"+
    "\4\7\10\1\1\7\1\1\3\7\1\1\1\7\1\1"+
    "\24\7\1\1\123\7\1\1\213\7\1\1\5\0\2\1"+
    "\236\7\11\1\46\7\2\1\1\7\7\1\47\7\7\1"+
    "\1\7\1\1\55\0\1\1\1\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\10\1\33\7\5\1\3\7\15\1"+
    "\5\0\6\1\1\7\4\1\13\0\5\1\53\7\37\0"+
    "\4\1\2\7\1\0\143\7\1\1\1\7\10\0\1\1"+
    "\6\0\2\7\2\0\1\1\4\0\2\7\12\0\3\7"+
    "\2\1\1\7\17\1\1\0\1\7\1\0\36\7\33\0"+
    "\2\1\131\7\13\0\1\7\16\1\12\0\41\7\11\0"+
    "\2\7\4\1\1\7\5\1\26\7\4\0\1\7\11\0"+
    "\1\7\3\0\1\7\5\0\22\1\31\7\3\0\104\1"+
    "\1\7\1\1\13\7\67\1\33\0\1\1\4\0\66\7"+
    "\3\0\1\7\22\0\1\7\7\0\12\7\2\0\2\1"+
    "\12\0\1\1\7\7\1\1\7\7\1\1\3\0\1\1"+
    "\10\7\2\1\2\7\2\1\26\7\1\1\7\7\1\1"+
    "\1\7\3\1\4\7\2\1\1\0\1\7\7\0\2\1"+
    "\2\0\2\1\3\0\1\7\10\1\1\0\4\1\2\7"+
    "\1\1\3\7\2\0\2\1\12\0\4\7\7\1\1\7"+
    "\5\1\3\0\1\1\6\7\4\1\2\7\2\1\26\7"+
    "\1\1\7\7\1\1\2\7\1\1\2\7\1\1\2\7"+
    "\2\1\1\0\1\1\5\0\4\1\2\0\2\1\3\0"+
    "\3\1\1\0\7\1\4\7\1\1\1\7\7\1\14\0"+
    "\3\7\1\0\13\1\3\0\1\1\11\7\1\1\3\7"+
    "\1\1\26\7\1\1\7\7\1\1\2\7\1\1\5\7"+
    "\2\1\1\0\1\7\10\0\1\1\3\0\1\1\3\0"+
    "\2\1\1\7\17\1\2\7\2\0\2\1\12\0\1\1"+
    "\1\7\17\1\3\0\1\1\10\7\2\1\2\7\2\1"+
    "\26\7\1\1\7\7\1\1\2\7\1\1\5\7\2\1"+
    "\1\0\1\7\7\0\2\1\2\0\2\1\3\0\10\1"+
    "\2\0\4\1\2\7\1\1\3\7\2\0\2\1\12\0"+
    "\1\1\1\7\20\1\1\0\1\7\1\1\6\7\3\1"+
    "\3\7\1\1\4\7\3\1\2\7\1\1\1\7\1\1"+
    "\2\7\3\1\2\7\3\1\3\7\3\1\14\7\4\1"+
    "\5\0\3\1\3\0\1\1\4\0\2\1\1\7\6\1"+
    "\1\0\16\1\12\0\11\1\1\7\7\1\3\0\1\1"+
    "\10\7\1\1\3\7\1\1\27\7\1\1\12\7\1\1"+
    "\5\7\3\1\1\7\7\0\1\1\3\0\1\1\4\0"+
    "\7\1\2\0\1\1\2\7\6\1\2\7\2\0\2\1"+
    "\12\0\22\1\2\0\1\1\10\7\1\1\3\7\1\1"+
    "\27\7\1\1\12\7\1\1\5\7\2\1\1\0\1\7"+
    "\7\0\1\1\3\0\1\1\4\0\7\1\2\0\7\1"+
    "\1\7\1\1\2\7\2\0\2\1\12\0\1\1\2\7"+
    "\17\1\2\0\1\1\10\7\1\1\3\7\1\1\51\7"+
    "\2\1\1\7\7\0\1\1\3\0\1\1\4\0\1\7"+
    "\10\1\1\0\10\1\2\7\2\0\2\1\12\0\12\1"+
    "\6\7\2\1\2\0\1\1\22\7\3\1\30\7\1\1"+
    "\11\7\1\1\1\7\2\1\7\7\3\1\1\0\4\1"+
    "\6\0\1\1\1\0\1\1\10\0\22\1\2\0\15\1"+
    "\60\7\1\0\2\7\7\0\4\1\10\7\10\0\1\1"+
    "\12\0\47\1\2\7\1\1\1\7\2\1\2\7\1\1"+
    "\1\7\2\1\1\7\6\1\4\7\1\1\7\7\1\1"+
    "\3\7\1\1\1\7\1\1\1\7\2\1\2\7\1\1"+
    "\4\7\1\0\2\7\6\0\1\1\2\0\1\7\2\1"+
    "\5\7\1\1\1\7\1\1\6\0\2\1\12\0\2\1"+
    "\4\7\40\1\1\7\27\1\2\0\6\1\12\0\13\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\2\0\10\7"+
    "\1\1\44\7\4\1\24\0\1\1\2\0\5\7\13\0"+
    "\1\1\44\0\11\1\1\0\71\1\53\7\24\0\1\7"+
    "\12\0\6\1\6\7\4\0\4\7\3\0\1\7\3\0"+
    "\2\7\7\0\3\7\4\0\15\7\14\0\1\7\17\0"+
    "\2\1\46\7\1\1\1\7\5\1\1\7\2\1\53\7"+
    "\1\1\u014d\7\1\1\4\7\2\1\7\7\1\1\1\7"+
    "\1\1\4\7\2\1\51\7\1\1\4\7\2\1\41\7"+
    "\1\1\4\7\2\1\7\7\1\1\1\7\1\1\4\7"+
    "\2\1\17\7\1\1\71\7\1\1\4\7\2\1\103\7"+
    "\2\1\3\0\40\1\20\7\20\1\125\7\14\1\u016c\7"+
    "\2\1\21\7\1\1\32\7\5\1\113\7\3\1\3\7"+
    "\17\1\15\7\1\1\4\7\3\0\13\1\22\7\3\0"+
    "\13\1\22\7\2\0\14\1\15\7\1\1\3\7\1\1"+
    "\2\0\14\1\64\7\40\0\3\1\1\7\3\1\2\7"+
    "\1\0\2\1\12\0\41\1\3\0\2\1\12\0\6\1"+
    "\130\7\10\1\51\7\1\0\1\7\5\1\106\7\12\1"+
    "\35\7\3\1\14\0\4\1\14\0\12\1\12\0\36\7"+
    "\2\1\5\7\13\1\54\7\4\1\21\0\7\7\2\0"+
    "\6\1\12\0\46\1\27\7\5\0\4\1\65\7\12\0"+
    "\1\1\35\0\2\1\13\0\6\1\12\0\15\1\1\7"+
    "\130\1\5\0\57\7\21\0\7\7\4\1\12\0\21\1"+
    "\11\0\14\1\3\0\36\7\15\0\2\7\12\0\54\7"+
    "\16\0\14\1\44\7\24\0\10\1\12\0\3\1\3\7"+
    "\12\0\44\7\122\1\3\0\1\1\25\0\4\7\1\0"+
    "\4\7\3\0\2\7\11\1\300\7\47\0\25\1\4\0"+
    "\26\7\2\1\6\7\2\1\46\7\2\1\6\7\2\1"+
    "\10\7\1\1\1\7\1\1\1\7\1\1\1\7\1\1"+
    "\37\7\2\1\65\7\1\1\7\7\1\1\1\7\3\1"+
    "\3\7\1\1\7\7\3\1\4\7\2\1\6\7\4\1"+
    "\15\7\5\1\3\7\1\1\7\7\16\1\5\0\32\1"+
    "\5\0\20\1\2\7\23\1\1\7\13\1\5\0\5\1"+
    "\6\0\1\1\1\7\15\1\1\7\20\1\15\7\3\1"+
    "\33\7\25\1\15\0\4\1\1\0\3\1\14\0\21\1"+
    "\1\7\4\1\1\7\2\1\12\7\1\1\1\7\3\1"+
    "\5\7\6\1\1\7\1\1\1\7\1\1\1\7\1\1"+
    "\4\7\1\1\13\7\2\1\4\7\5\1\5\7\4\1"+
    "\1\7\21\1\51\7\u0177\1\57\7\1\1\57\7\1\1"+
    "\205\7\6\1\4\7\3\0\2\7\14\1\46\7\1\1"+
    "\1\7\5\1\1\7\2\1\70\7\7\1\1\7\17\1"+
    "\1\0\27\7\11\1\7\7\1\1\7\7\1\1\7\7"+
    "\1\1\7\7\1\1\7\7\1\1\7\7\1\1\7\7"+
    "\1\1\7\7\1\1\40\0\57\1\1\7\325\1\3\7"+
    "\31\1\11\7\6\0\1\1\5\7\2\1\5\7\4\1"+
    "\126\7\2\1\2\0\2\1\3\7\1\1\132\7\1\1"+
    "\4\7\5\1\51\7\3\1\136\7\21\1\33\7\65\1"+
    "\306\7\112\1\315\7\63\1\215\7\103\1\56\7\2\1"+
    "\15\7\3\1\20\7\12\0\2\7\24\1\57\7\1\0"+
    "\4\1\12\0\1\1\31\7\7\1\1\0\120\7\2\0"+
    "\45\1\11\7\2\1\147\7\2\1\4\7\1\1\4\7"+
    "\14\1\13\7\115\1\12\7\1\0\3\7\1\0\4\7"+
    "\1\0\27\7\5\0\20\1\1\7\7\1\64\7\14\1"+
    "\2\0\62\7\21\0\13\1\12\0\6\1\22\0\6\7"+
    "\3\1\1\7\4\1\12\0\34\7\10\0\2\1\27\7"+
    "\15\0\14\1\35\7\3\1\4\0\57\7\16\0\16\1"+
    "\1\7\12\0\46\1\51\7\16\0\11\1\3\7\1\0"+
    "\10\7\2\0\2\1\12\0\6\1\27\7\3\1\1\7"+
    "\1\0\4\1\60\7\1\0\1\7\3\0\2\7\2\0"+
    "\5\7\2\0\1\7\1\0\1\7\30\1\3\7\2\1"+
    "\13\7\5\0\2\1\3\7\2\0\12\1\6\7\2\1"+
    "\6\7\2\1\6\7\11\1\7\7\1\1\7\7\221\1"+
    "\43\7\10\0\1\1\2\0\2\1\12\0\6\1\244\7"+
    "\14\1\27\7\4\1\61\7\4\1\156\7\2\1\152\7"+
    "\46\1\7\7\14\1\5\7\5\1\1\7\1\0\12\7"+
    "\1\1\15\7\1\1\5\7\1\1\1\7\1\1\2\7"+
    "\1\1\2\7\1\1\154\7\41\1\153\7\22\1\100\7"+
    "\2\1\66\7\50\1\15\7\3\1\20\0\20\1\7\0"+
    "\14\1\2\7\30\1\3\7\31\1\1\7\6\1\5\7"+
    "\1\1\207\7\2\1\1\0\4\1\1\7\13\1\12\0"+
    "\7\1\32\7\4\1\1\7\1\1\32\7\13\1\131\7"+
    "\3\1\6\7\2\1\6\7\2\1\6\7\2\1\3\7"+
    "\3\1\2\7\3\1\2\7\22\1\3\0\4\1\14\7"+
    "\1\1\32\7\1\1\23\7\1\1\2\7\1\1\17\7"+
    "\2\1\16\7\42\1\173\7\105\1\65\7\210\1\1\0"+
    "\202\1\35\7\3\1\61\7\57\1\37\7\21\1\33\7"+
    "\65\1\36\7\2\1\44\7\4\1\10\7\1\1\5\7"+
    "\52\1\236\7\2\1\12\0\126\1\6\7\2\1\1\7"+
    "\1\1\54\7\1\1\2\7\3\1\1\7\2\1\27\7"+
    "\252\1\26\7\12\1\32\7\106\1\70\7\6\1\2\7"+
    "\100\1\1\7\3\0\1\1\2\0\5\1\4\0\4\7"+
    "\1\1\3\7\1\1\33\7\4\1\3\0\4\1\1\0"+
    "\40\1\35\7\203\1\66\7\12\1\26\7\12\1\23\7"+
    "\215\1\111\7\267\1\3\0\65\7\17\0\37\1\12\0"+
    "\20\1\3\0\55\7\13\0\2\1\1\0\22\1\31\7"+
    "\7\1\12\0\6\1\3\0\44\7\16\0\1\1\12\0"+
    "\100\1\3\0\60\7\16\0\4\7\13\1\12\0\246\1"+
    "\53\7\15\0\10\1\12\0\66\1\157\7\221\1\143\7"+
    "\235\1\57\7\321\1\71\7\307\1\105\7\13\1\1\7"+
    "\56\0\20\1\4\0\15\7\140\1\2\7\u0163\1\5\0"+
    "\3\1\26\0\2\1\7\0\36\1\4\0\224\1\3\0"+
    "\273\1\125\7\1\1\107\7\1\1\2\7\2\1\1\7"+
    "\2\1\2\7\2\1\4\7\1\1\14\7\1\1\1\7"+
    "\1\1\7\7\1\1\101\7\1\1\4\7\2\1\10\7"+
    "\1\1\7\7\1\1\34\7\1\1\4\7\1\1\5\7"+
    "\1\1\1\7\3\1\7\7\1\1\u0154\7\2\1\31\7"+
    "\1\1\31\7\1\1\37\7\1\1\31\7\1\1\37\7"+
    "\1\1\31\7\1\1\37\7\1\1\31\7\1\1\37\7"+
    "\1\1\31\7\1\1\10\7\2\1\62\0\4\7\1\1"+
    "\33\7\1\1\2\7\1\1\1\7\2\1\1\7\1\1"+
    "\12\7\1\1\4\7\1\1\1\7\1\1\1\7\6\1"+
    "\1\7\4\1\1\7\1\1\1\7\1\1\1\7\1\1"+
    "\3\7\1\1\2\7\1\1\1\7\2\1\1\7\1\1"+
    "\1\7\1\1\1\7\1\1\1\7\1\1\1\7\1\1"+
    "\2\7\1\1\1\7\2\1\4\7\1\1\7\7\1\1"+
    "\4\7\1\1\4\7\1\1\1\7\1\1\12\7\1\1"+
    "\21\7\5\1\3\7\1\1\5\7\1\1\21\7\104\1"+
    "\327\7\51\1\65\7\13\1\336\7\343\1\1\0\36\1"+
    "\140\0\200\1\360\0\20\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\3\4"+
    "\1\7\2\4\2\10\1\4\20\6\1\4\1\11\1\12"+
    "\1\13\1\6\2\0\1\14\1\0\1\15\10\6\1\16"+
    "\15\6\1\17\1\20\1\21\1\22\1\6\2\0\2\14"+
    "\1\23\1\24\10\6\1\16\11\6\1\0\1\14\1\24"+
    "\1\6\1\16\11\6\1\25\2\6\1\16\1\6\1\26"+
    "\11\6\1\16\7\6\1\16\3\6\1\16\3\6\1\16"+
    "\2\6\1\16\25\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\142\0\223\0\142\0\304\0\142"+
    "\0\365\0\142\0\u0126\0\u0157\0\142\0\u0188\0\u01b9\0\u01ea"+
    "\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372"+
    "\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa"+
    "\0\u052b\0\u055c\0\u058d\0\u05be\0\142\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u0620\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\142\0\142\0\142\0\142\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\142\0\u0bde\0\u06e4\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0b4b\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0b7c\0\u0fb2\0\u0fe3\0\u0f50\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u0f50\0\u11cd\0\u11fe"+
    "\0\u11fe\0\u122f\0\u11fe\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u13b7\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u14dd\0\u1570\0\u15a1\0\u15d2"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1665\0\u1696\0\u16c7\0\u16c7"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\7\1\14\1\15\1\16\1\12\1\17\1\20"+
    "\1\21\1\22\1\7\1\23\2\11\1\24\1\11\1\3"+
    "\2\11\1\25\1\26\1\11\1\27\1\30\2\11\1\31"+
    "\1\11\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\11\1\41\1\42\1\11\1\43\2\44\2\3\2\44"+
    "\1\45\22\44\1\46\27\44\63\0\1\4\101\0\1\12"+
    "\35\0\1\47\6\0\1\47\10\0\2\47\2\0\5\47"+
    "\1\0\26\47\12\0\1\12\62\0\1\12\7\0\1\12"+
    "\52\0\1\12\2\0\1\20\1\50\1\0\1\12\47\0"+
    "\1\51\4\0\1\52\3\0\1\12\65\0\1\53\46\0"+
    "\1\54\1\0\2\21\54\0\1\12\5\0\1\12\35\0"+
    "\1\47\6\0\1\47\10\0\2\47\2\0\5\47\1\0"+
    "\17\47\1\55\6\47\1\0\1\47\6\0\1\47\10\0"+
    "\2\47\2\0\5\47\1\0\1\47\1\56\24\47\1\0"+
    "\1\47\6\0\1\47\10\0\2\47\2\0\5\47\1\0"+
    "\15\47\1\57\1\47\1\60\6\47\1\0\1\47\6\0"+
    "\1\47\10\0\2\47\2\0\5\47\1\0\13\47\1\61"+
    "\1\47\1\62\10\47\1\0\1\47\6\0\1\47\10\0"+
    "\2\47\2\0\5\47\1\0\13\47\1\63\12\47\1\0"+
    "\1\47\6\0\1\47\10\0\2\47\2\0\5\47\1\0"+
    "\1\47\1\64\7\47\1\65\3\47\1\66\10\47\1\0"+
    "\1\47\6\0\1\47\10\0\2\47\2\0\5\47\1\0"+
    "\6\47\1\65\5\47\1\67\11\47\1\0\1\47\6\0"+
    "\1\47\10\0\2\47\2\0\5\47\1\0\5\47\1\70"+
    "\7\47\1\71\10\47\1\0\1\47\6\0\1\47\10\0"+
    "\2\47\2\0\5\47\1\0\5\47\1\72\20\47\1\0"+
    "\1\47\6\0\1\47\10\0\2\47\2\0\5\47\1\0"+
    "\22\47\1\73\3\47\1\0\1\47\6\0\1\47\10\0"+
    "\2\47\2\0\5\47\1\0\15\47\1\57\10\47\1\0"+
    "\1\47\6\0\1\47\10\0\2\47\2\0\5\47\1\0"+
    "\5\47\1\74\7\47\1\75\10\47\1\0\1\47\6\0"+
    "\1\47\10\0\2\47\2\0\5\47\1\0\21\47\1\76"+
    "\4\47\1\0\1\47\6\0\1\47\10\0\2\47\2\0"+
    "\5\47\1\0\10\47\1\77\6\47\1\100\6\47\1\0"+
    "\1\47\6\0\1\47\10\0\2\47\2\0\5\47\1\0"+
    "\15\47\1\101\10\47\1\0\1\47\6\0\1\47\10\0"+
    "\2\47\2\0\5\47\1\0\10\47\1\102\15\47\61\0"+
    "\1\12\2\44\2\0\2\44\1\0\22\44\1\0\27\44"+
    "\6\0\1\103\37\0\1\104\2\0\1\105\1\0\1\106"+
    "\5\0\1\107\6\0\1\107\10\0\2\107\2\0\5\107"+
    "\1\0\26\107\17\0\1\54\1\0\2\50\37\0\12\110"+
    "\1\111\46\110\2\52\1\112\1\113\55\52\20\0\2\114"+
    "\2\0\3\114\4\0\6\114\40\0\2\54\4\0\1\115"+
    "\32\0\1\107\6\0\1\107\10\0\2\107\2\0\5\107"+
    "\1\0\17\107\1\116\6\107\1\0\1\107\6\0\1\107"+
    "\10\0\2\107\2\0\5\107\1\0\11\107\1\117\14\107"+
    "\1\0\1\107\6\0\1\107\10\0\2\107\2\0\5\107"+
    "\1\0\15\107\1\120\10\107\1\0\1\107\6\0\1\107"+
    "\10\0\2\107\2\0\5\107\1\0\5\107\1\121\20\107"+
    "\1\0\1\107\6\0\1\107\10\0\2\107\2\0\5\107"+
    "\1\0\1\107\1\122\24\107\1\0\1\107\6\0\1\107"+
    "\10\0\2\107\2\0\5\107\1\0\14\107\1\123\11\107"+
    "\1\0\1\107\6\0\1\107\10\0\2\107\2\0\5\107"+
    "\1\0\20\107\1\124\5\107\1\0\1\107\6\0\1\107"+
    "\10\0\2\107\2\0\5\107\1\0\13\107\1\125\12\107"+
    "\1\0\1\107\6\0\1\107\10\0\2\107\2\0\5\107"+
    "\1\0\17\107\1\126\6\107\1\0\1\107\6\0\1\107"+
    "\10\0\2\107\2\0\5\107\1\0\1\127\20\107\1\126"+
    "\4\107\1\0\1\107\6\0\1\107\10\0\2\107\2\0"+
    "\5\107\1\0\14\107\1\126\4\107\1\126\4\107\1\0"+
    "\1\107\6\0\1\107\10\0\2\107\2\0\5\107\1\0"+
    "\15\107\1\130\10\107\1\0\1\107\6\0\1\107\10\0"+
    "\2\107\2\0\5\107\1\0\24\107\1\126\1\107\1\0"+
    "\1\107\6\0\1\107\10\0\2\107\2\0\5\107\1\0"+
    "\21\107\1\131\4\107\1\0\1\107\6\0\1\107\10\0"+
    "\2\107\2\0\5\107\1\0\1\107\1\120\17\107\1\132"+
    "\4\107\1\0\1\107\6\0\1\107\10\0\2\107\2\0"+
    "\5\107\1\0\6\107\1\126\17\107\1\0\1\107\6\0"+
    "\1\107\10\0\2\107\2\0\5\107\1\0\17\107\1\133"+
    "\6\107\1\0\1\107\6\0\1\107\10\0\2\107\2\0"+
    "\5\107\1\0\5\107\1\117\20\107\1\0\1\107\6\0"+
    "\1\107\10\0\2\107\2\0\5\107\1\0\22\107\1\134"+
    "\3\107\1\0\1\107\6\0\1\107\10\0\2\107\2\0"+
    "\5\107\1\0\11\107\1\135\14\107\1\0\1\107\6\0"+
    "\1\107\10\0\2\107\2\0\5\107\1\0\11\107\1\136"+
    "\14\107\1\0\1\137\6\0\1\137\10\0\2\137\2\0"+
    "\5\137\1\0\26\137\1\0\12\110\1\140\60\110\1\140"+
    "\4\110\1\141\41\110\2\0\1\112\73\0\1\142\2\0"+
    "\2\142\37\0\1\137\6\0\1\137\10\0\2\137\2\0"+
    "\5\137\1\0\1\137\1\143\24\137\1\0\1\137\6\0"+
    "\1\137\10\0\2\137\2\0\5\137\1\0\14\137\1\144"+
    "\11\137\1\0\1\137\6\0\1\137\10\0\2\137\2\0"+
    "\5\137\1\0\13\137\1\144\12\137\1\0\1\137\6\0"+
    "\1\137\10\0\2\137\2\0\5\137\1\0\1\137\1\145"+
    "\24\137\1\0\1\137\6\0\1\137\10\0\2\137\2\0"+
    "\5\137\1\0\20\137\1\146\5\137\1\0\1\137\6\0"+
    "\1\137\10\0\2\137\2\0\5\137\1\0\21\137\1\147"+
    "\4\137\1\0\1\137\6\0\1\137\10\0\2\137\2\0"+
    "\5\137\1\0\5\137\1\144\20\137\1\0\1\137\6\0"+
    "\1\137\10\0\2\137\2\0\5\137\1\0\20\137\1\150"+
    "\5\137\1\0\1\137\6\0\1\137\10\0\2\137\2\0"+
    "\5\137\1\0\11\137\1\151\6\137\1\152\5\137\1\0"+
    "\1\137\6\0\1\137\10\0\2\137\2\0\5\137\1\0"+
    "\16\137\1\144\7\137\1\0\1\137\6\0\1\137\10\0"+
    "\2\137\2\0\5\137\1\0\1\153\25\137\1\0\1\137"+
    "\6\0\1\137\10\0\2\137\2\0\5\137\1\0\22\137"+
    "\1\154\3\137\1\0\1\137\6\0\1\137\10\0\2\137"+
    "\2\0\5\137\1\0\11\137\1\155\14\137\1\0\1\137"+
    "\6\0\1\137\10\0\2\137\2\0\5\137\1\0\5\137"+
    "\1\156\20\137\1\0\1\137\6\0\1\137\10\0\2\137"+
    "\2\0\5\137\1\0\4\137\1\144\21\137\1\0\1\137"+
    "\6\0\1\137\10\0\2\137\2\0\5\137\1\0\13\137"+
    "\1\157\12\137\1\0\1\160\6\0\1\160\10\0\2\160"+
    "\2\0\5\160\1\0\26\160\1\0\12\110\1\140\4\110"+
    "\1\112\41\110\20\0\2\142\37\0\1\160\6\0\1\160"+
    "\10\0\2\160\2\0\5\160\1\0\25\160\1\161\1\0"+
    "\1\160\6\0\1\160\10\0\2\160\2\0\5\160\1\0"+
    "\12\160\1\161\13\160\1\0\1\160\6\0\1\160\10\0"+
    "\2\160\2\0\5\160\1\0\20\160\1\161\5\160\1\0"+
    "\1\160\6\0\1\160\10\0\2\160\2\0\5\160\1\0"+
    "\11\160\1\162\14\160\1\0\1\160\6\0\1\160\10\0"+
    "\2\160\2\0\5\160\1\0\5\160\1\163\20\160\1\0"+
    "\1\160\6\0\1\160\10\0\2\160\2\0\5\160\1\0"+
    "\14\160\1\164\11\160\1\0\1\160\6\0\1\160\10\0"+
    "\2\160\2\0\5\160\1\0\21\160\1\165\4\160\1\0"+
    "\1\160\6\0\1\160\10\0\2\160\2\0\5\160\1\0"+
    "\11\160\1\166\5\160\1\167\1\170\5\160\1\0\1\160"+
    "\6\0\1\160\10\0\2\160\2\0\5\160\1\0\17\160"+
    "\1\171\6\160\1\0\1\160\6\0\1\160\10\0\2\160"+
    "\2\0\5\160\1\0\14\160\1\172\11\160\1\0\1\160"+
    "\6\0\1\160\10\0\2\160\2\0\5\160\1\0\5\160"+
    "\1\161\20\160\1\0\1\173\6\0\1\173\10\0\2\173"+
    "\2\0\5\173\1\0\26\173\1\0\1\173\6\0\1\173"+
    "\10\0\2\173\2\0\5\173\1\0\14\173\1\174\11\173"+
    "\1\0\1\173\6\0\1\173\10\0\2\173\2\0\5\173"+
    "\1\0\21\173\1\175\4\173\1\0\1\173\6\0\1\173"+
    "\10\0\2\173\2\0\5\173\1\0\17\173\1\176\6\173"+
    "\1\0\1\173\6\0\1\173\10\0\2\173\2\0\5\173"+
    "\1\0\14\173\1\177\11\173\1\0\1\173\6\0\1\173"+
    "\10\0\2\173\2\0\5\173\1\0\5\173\1\200\20\173"+
    "\1\0\1\173\6\0\1\173\10\0\2\173\2\0\5\173"+
    "\1\0\21\173\1\201\4\173\1\0\1\173\6\0\1\173"+
    "\10\0\2\173\2\0\5\173\1\0\14\173\1\175\11\173"+
    "\1\0\1\173\6\0\1\173\10\0\2\173\2\0\5\173"+
    "\1\0\7\173\1\175\16\173\1\0\1\202\6\0\1\202"+
    "\10\0\2\202\2\0\5\202\1\0\26\202\1\0\1\202"+
    "\6\0\1\202\10\0\2\202\2\0\5\202\1\0\22\202"+
    "\1\203\3\202\1\0\1\202\6\0\1\202\10\0\2\202"+
    "\2\0\5\202\1\0\11\202\1\204\14\202\1\0\1\202"+
    "\6\0\1\202\10\0\2\202\2\0\5\202\1\0\21\202"+
    "\1\205\4\202\1\0\1\202\6\0\1\202\10\0\2\202"+
    "\2\0\5\202\1\0\1\202\1\206\24\202\1\0\1\202"+
    "\6\0\1\202\10\0\2\202\2\0\5\202\1\0\17\202"+
    "\1\207\6\202\1\0\1\210\6\0\1\210\10\0\2\210"+
    "\2\0\5\210\1\0\26\210\1\0\1\210\6\0\1\210"+
    "\10\0\2\210\2\0\5\210\1\0\5\210\1\211\20\210"+
    "\1\0\1\210\6\0\1\210\10\0\2\210\2\0\5\210"+
    "\1\0\14\210\1\212\11\210\1\0\1\210\6\0\1\210"+
    "\10\0\2\210\2\0\5\210\1\0\13\210\1\211\12\210"+
    "\1\0\1\210\6\0\1\210\10\0\2\210\2\0\5\210"+
    "\1\0\11\210\1\213\14\210\1\0\1\214\6\0\1\214"+
    "\10\0\2\214\2\0\5\214\1\0\26\214\1\0\1\214"+
    "\6\0\1\214\10\0\2\214\2\0\5\214\1\0\7\214"+
    "\1\215\16\214\1\0\1\214\6\0\1\214\10\0\2\214"+
    "\2\0\5\214\1\0\14\214\1\216\11\214\1\0\1\217"+
    "\6\0\1\217\10\0\2\217\2\0\5\217\1\0\26\217"+
    "\1\0\1\217\6\0\1\217\10\0\2\217\2\0\5\217"+
    "\1\0\7\217\1\220\16\217\1\0\1\221\6\0\1\221"+
    "\10\0\2\221\2\0\5\221\1\0\26\221\1\0\1\222"+
    "\6\0\1\222\10\0\2\222\2\0\5\222\1\0\26\222"+
    "\1\0\1\223\6\0\1\223\10\0\2\223\2\0\5\223"+
    "\1\0\26\223\1\0\1\224\6\0\1\224\10\0\2\224"+
    "\2\0\5\224\1\0\26\224\1\0\1\225\6\0\1\225"+
    "\10\0\2\225\2\0\5\225\1\0\26\225\1\0\1\226"+
    "\6\0\1\226\10\0\2\226\2\0\5\226\1\0\26\226"+
    "\1\0\1\227\6\0\1\227\10\0\2\227\2\0\5\227"+
    "\1\0\26\227\1\0\1\230\6\0\1\230\10\0\2\230"+
    "\2\0\5\230\1\0\26\230\1\0\1\231\6\0\1\231"+
    "\10\0\2\231\2\0\5\231\1\0\26\231\1\0\1\232"+
    "\6\0\1\232\10\0\2\232\2\0\5\232\1\0\26\232"+
    "\1\0\1\233\6\0\1\233\10\0\2\233\2\0\5\233"+
    "\1\0\26\233\1\0\1\234\6\0\1\234\10\0\2\234"+
    "\2\0\5\234\1\0\26\234\1\0\1\235\6\0\1\235"+
    "\10\0\2\235\2\0\5\235\1\0\26\235\1\0\1\236"+
    "\6\0\1\236\10\0\2\236\2\0\5\236\1\0\26\236"+
    "\1\0\1\237\6\0\1\237\10\0\2\237\2\0\5\237"+
    "\1\0\26\237\1\0\1\240\6\0\1\240\10\0\2\240"+
    "\2\0\5\240\1\0\26\240\1\0\1\241\6\0\1\241"+
    "\10\0\2\241\2\0\5\241\1\0\26\241\1\0\1\242"+
    "\6\0\1\242\10\0\2\242\2\0\5\242\1\0\26\242"+
    "\1\0\1\243\6\0\1\243\10\0\2\243\2\0\5\243"+
    "\1\0\26\243\1\0\1\244\6\0\1\244\10\0\2\244"+
    "\2\0\5\244\1\0\26\244\1\0\1\245\6\0\1\245"+
    "\10\0\2\245\2\0\5\245\1\0\26\245\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\27\1\1\11\2\1\2\0\1\1\1\0"+
    "\27\1\4\11\1\1\2\0\1\11\25\1\1\0\104\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();  
  
  private String html = "<html>\n" +
            "<body>";

  public Symbol currentSymbol;
  private Symbol symbol(String tokenName, Object value) {
    return new Symbol(tokenName,value);
  }

  public void end() {
    html += "</body>\n" +
                            "</html>";
    try {
        File file = new File("src/tmp.html");
        FileWriter f = new FileWriter("C:/Users/HOME/IdeaProjects/Scanner/src/tmp.html");
          f.write(html);
          f.close();
        }catch (IOException e) {
          System.out.println("ERROR");
        }
  
  }

  private void IdentifierE() {
      html += "<l style=\"color:violet; \">" + yytext() +"</l>";
  }
            
  private void keyword() {
      html += "<l style=\"color:blue; font-weight : bold;\">" + yytext() +"</l>";
  }

  private void integerN() {
      html += "<l style=\"color:orange;\">" + yytext() +"</l>";
  }

  private void realNum() {
      html += "<l style=\"color:orange;\">" + "<i>" + yytext() + "</i>" +"</l>";
  }

  private void stringS() {
      html += "<l style=\"color:green;\">" + string +"</l>";
  }

  private void comment() {
      html += "<l style=\"color:yellow;\">" + yytext()+"</l>";
  }

  private void operator() {
      html += "<l style=\"color:black;\">" + yytext()+"</l>";
  }

  private void undefindToken() {
      html += "<l style=\"color:red;\">" + yytext()+"</l>";
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompilerScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nextSymbol() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { undefindToken(); return symbol(null,null);
            }
            // fall through
          case 23: break;
          case 2:
            { html += "<l style=\"color:red;\"> <br> </l>"; return symbol("LineTerminator",yytext());
            }
            // fall through
          case 24: break;
          case 3:
            { html += "<l style=\"color:red;\"> &nbsp </l>"; return symbol("SPACE",yytext());
            }
            // fall through
          case 25: break;
          case 4:
            { operator(); yybegin(YYINITIAL); return symbol("operator",yytext());
            }
            // fall through
          case 26: break;
          case 5:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 27: break;
          case 6:
            { IdentifierE(); yybegin(YYINITIAL); return symbol("Identifier",yytext());
            }
            // fall through
          case 28: break;
          case 7:
            { operator(); yybegin(YYINITIAL); return symbol("comma",yytext());
            }
            // fall through
          case 29: break;
          case 8:
            { integerN();yybegin(YYINITIAL); return symbol("DecIntegerLiteral",yytext());
            }
            // fall through
          case 30: break;
          case 9:
            { string.append( yytext() ); html += "<l style=\"color:green;\">" + yytext() + "</l>";return symbol("String",yytext());
            }
            // fall through
          case 31: break;
          case 10:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 32: break;
          case 11:
            { string.append('\\'); html += "<l style=\"color:green;\">" + "<i>" + "\\" + "</i>" +"</l>";
            }
            // fall through
          case 33: break;
          case 12:
            { comment(); html += "<l style=\"color:red;\"> <br> </l>"; return symbol("comment",yytext());
            }
            // fall through
          case 34: break;
          case 13:
            { realNum();yybegin(YYINITIAL); return symbol("RealNumber",yytext());
            }
            // fall through
          case 35: break;
          case 14:
            { keyword();
                                   yybegin(YYINITIAL);
                                   return symbol("keyword",yytext());
            }
            // fall through
          case 36: break;
          case 15:
            { string.append('\"'); html += "<l style=\"color:green;\">" + "<i>" + "\\\"" + "</i>" +"</l>";
            }
            // fall through
          case 37: break;
          case 16:
            { string.append('\n'); html += "<l style=\"color:green;\">" + "<i>" +"\\n"+ "</i>" +"</l>";
            }
            // fall through
          case 38: break;
          case 17:
            { string.append('\r'); html += "<l style=\"color:green;\">" + "<i>" +"\\r"+ "</i>" +"</l>";
            }
            // fall through
          case 39: break;
          case 18:
            { string.append('\t'); html += "<l style=\"color:green;\">" + "<i>" +"\\t"+ "</i>" +"</l>";
            }
            // fall through
          case 40: break;
          case 19:
            { integerN();yybegin(YYINITIAL); return symbol("HexadecimalLiteral",yytext());
            }
            // fall through
          case 41: break;
          case 20:
            { integerN();yybegin(YYINITIAL); return symbol("ScientificNotation",yytext());
            }
            // fall through
          case 42: break;
          case 21:
            { yybegin(YYINITIAL); return symbol("true",yytext());
            }
            // fall through
          case 43: break;
          case 22:
            { yybegin(YYINITIAL); return symbol("false",yytext());
            }
            // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  @Override
  public String nextToken() {
    try {
      currentSymbol = nextSymbol();
      if (currentSymbol == null) {
        return "$";
      }

      while (currentSymbol.getTokenName().equals("comment") || currentSymbol.getTokenName().equals("SPACE") || currentSymbol.getTokenName().equals("LineTerminator")) {
        currentSymbol = nextSymbol();
        if (currentSymbol == null) {
          return "$";
        }
      }

      switch (currentSymbol.getTokenName()){
        case "true" : {
          System.out.println("true");
          return "true";
        }
        case "false" : {
          System.out.println("false");
          return "false";
        }
        case "Identifier" : {
          System.out.println("Identifier");
          return "id";
        }
        case "keyword" : {
          System.out.println("keyword");
          return (String) currentSymbol.getValue();
        }
        case "operator" : {
          System.out.println("operator");
          return (String) currentSymbol.getValue();
        }
        case "DecIntegerLiteral" : {
          System.out.println("DecIntegerLiteral");
          return "ic";
        }
        case "RealNumber" : {
          System.out.println("RealNumber");
          return "rc";
        }
        case "String" : {
          System.out.println("STRING");
          return "sc";
        }
        case "comma" : {
          System.out.println("comma");
          return "comma";
        }

      }

      return currentSymbol.getTokenName();

    } catch (IOException e) {
      e.printStackTrace();
      return null;
    }

  }

}
